I. Spring框架概述
1. 开始使用Spring
2. Spring框架介绍
2.1. 依赖注入和控制反转
2.2. 模块
2.2.1. 核心容器
2.2.2. AOP和Instrumentation
2.2.3. 消息
2.2.4. 数据访问与集成
2.2.5. Web
2.2.6. 测试
2.3. 使用场景
2.3.1. 依赖管理和命名约定
Spring依赖项和对Spring的依赖
Maven依赖管理
Maven "Bill Of Materials" 依赖
Gradle依赖管理
Ivy依赖管理
Zip文件分发
2.3.2. 日志
不使用Commons Logging
使用SLF4J
使用Log4J
II. Spring框架4.x版本中的新特性
3. Spring框架4.0版本中的新特性和增强功能
3.1. 改进的入门体验
3.2. 移除过时的包和方法
3.3. 支持Java 8 (兼容Java 6和Java 7)
3.4. Java EE 6 和 7
3.5. Groovy DSL Bean定义 
3.6. 核心容器改进
3.7. 通用的Web改进
3.8. WebSocket, SockJS以及STOMP消息
3.9. 测试改进
4. Spring框架4.1版本中的新特性和增强功能
4.1. JMS改进
4.2. 缓存改进
4.3. Web改进
4.4. WebSocket STOMP消息改进
4.5. 测试改进
III. 核心技术
5. IoC容器
5.1. Spring IoC容器和Bean介绍
5.2. 容器概述
5.2.1. 配置元数据
5.2.2. 实例化一个容器
组合基于XML的配置元数据
5.2.3. 使用容器
5.3. Bean概述
5.3.1. 命名bean
为外部bean定义取一个别名
5.3.2. 实例化Bean
使用构造器实例化Bean
使用静态工厂方法实例化Bean
使用实例工厂方法实例化Bean
5.4. 依赖
5.4.1. 依赖注入
基于构造器的依赖注入
基于Setter方法的依赖注入
依赖解析过程
依赖注入示例
5.4.2. 依赖项和配置详细介绍
直接值(基本类型、字符串等等)
引用其他bean(collaborators)
内部beans
Collections
Null和空字符串
XML shortcut with the p-namespace
XML shortcut with the c-namespace
Compound property names
5.4.3. 使用depends-on
5.4.4. 延迟加载beans
5.4.5. Autowiring collaborators
Limitations and disadvantages of autowiring
Excluding a bean from autowiring
5.4.6. 方法注入
Lookup方法注入
Arbitrary method replacement
5.5. Bean作用域
5.5.1. singleton作用域
5.5.2. prototype作用域
5.5.3. Singleton beans with prototype-bean dependencies
5.5.4. Request, session以及global session作用域
Initial web configuration
Request作用域
Session作用域
Global session作用域
Application作用域
Scoped beans as dependencies
5.5.5. 自定义作用域
创建自定义作用域
使用自定义作用域
5.6. Customizing the nature of a bean
5.6.1. 生命周期回调函数
初始化回调函数
析构回调函数
默认的初始化和析构方法
Combining lifecycle mechanisms
启动和关闭回调函数
Shutting down the Spring IoC container gracefully in non-web applications
5.6.2. ApplicationContextAware和BeanNameAware接口
5.6.3. 其它Aware接口
5.7. Bean definition inheritance
5.8. Container Extension Points
5.8.1. Customizing beans using a BeanPostProcessor
示例: Hello World, BeanPostProcessor-style
示例: The RequiredAnnotationBeanPostProcessor
5.8.2. Customizing configuration metadata with a BeanFactoryPostProcessor
示例: the Class name substitution PropertyPlaceholderConfigurer
示例: the PropertyOverrideConfigurer
5.8.3. Customizing instantiation logic with a FactoryBean
5.9. 基于注解的容器配置
5.9.1. @Required注解
5.9.2. @Autowired注解
5.9.3. Fine-tuning annotation-based autowiring with qualifiers
5.9.4. Using generics as autowiring qualifiers
5.9.5. CustomAutowireConfigurer
5.9.6. @Resource注解
5.9.7. @PostConstruct和@PreDestroy注解
5.10. Classpath scanning and managed components
5.10.1. @Component and further stereotype annotations
5.10.2. 元注解
5.10.3. Automatically detecting classes and registering bean definitions
5.10.4. Using filters to customize scanning
5.10.5. Defining bean metadata within components
5.10.6. Naming autodetected components
5.10.7. Providing a scope for autodetected components
5.10.8. Providing qualifier metadata with annotations
5.11. 使用JSR 330标准注解
5.11.1. 使用@Inject和@Named进行依赖注入
5.11.2. @Named:一个等价于@Component注解的标准注解
5.11.3. 标准方法的限制
5.12. 基于Java的容器配置
5.12.1. 基本概念: @Bean和@Configuration注解
5.12.2. 使用AnnotationConfigApplicationContext实例化Spring容器
Simple construction
Building the container programmatically using register(Class<?>…)
Enabling component scanning with scan(String…)
Support for web applications with AnnotationConfigWebApplicationContext
5.12.3. 使用@Bean注解
声明一个bean
接收生命周期回调函数
指定bean作用域
Customizing bean naming
Bean aliasing
Bean描述
5.12.4. 使用@Configuration注解
Injecting inter-bean dependencies
Lookup method injection
Further information about how Java-based configuration works internally
5.12.5. Composing Java-based configurations
Using the @Import annotation
Conditionally including @Configuration classes or @Beans
Combining Java and XML configuration
5.13. Environment abstraction
5.13.1. Bean definition profiles
@Profile
5.13.2. XML Bean definition profiles
Enabling a profile
Default profile
5.13.3. PropertySource抽象
5.13.4. @PropertySource注解
5.13.5. Placeholder resolution in statements
5.14. 注册一个LoadTimeWeaver
5.15. Additional Capabilities of the ApplicationContext
5.15.1. 使用MessageSource进行国际化
5.15.2. 标准的和自定义的事件
5.15.3. Convenient access to low-level resources
5.15.4. Convenient ApplicationContext instantiation for web applications
5.15.5. Deploying a Spring ApplicationContext as a Java EE RAR file
5.16. BeanFactory
5.16.1. BeanFactory还是ApplicationContext?
5.16.2. Glue code and the evil singleton
6. Resources
6.1. 介绍
6.2. Resource接口
6.3. 内置的Resource接口实现
6.3.1. UrlResource
6.3.2. ClassPathResource
6.3.3. FileSystemResource
6.3.4. ServletContextResource
6.3.5. InputStreamResource
6.3.6. ByteArrayResource
6.4. ResourceLoader
6.5. ResourceLoaderAware接口
6.6. Resources as dependencies
6.7. Application contexts and Resource paths
6.7.1. Constructing application contexts
Constructing ClassPathXmlApplicationContext instances - shortcuts
6.7.2. Wildcards in application context constructor resource paths
Ant-style Patterns
The Classpath*: portability classpath*: prefix
Other notes relating to wildcards
6.7.3. FileSystemResource caveats
7. 校验, 数据绑定和类型转换
7.1. 介绍
7.2. 使用Spring的Validator的接口进行校验
7.3. Resolving codes to error messages
7.4. Bean manipulation and the BeanWrapper
7.4.1. Setting and getting basic and nested properties
7.4.2. 内置的PropertyEditor实现
Registering additional custom PropertyEditors
7.5. Spring类型转换
7.5.1. Converter SPI
7.5.2. ConverterFactory
7.5.3. GenericConverter
ConditionalGenericConverter
7.5.4. ConversionService API
7.5.5. Configuring a ConversionService
7.5.6. Using a ConversionService programmatically
7.6. Spring Field Formatting
7.6.1. Formatter SPI
7.6.2. Annotation-driven Formatting
Format Annotation API
7.6.3. FormatterRegistry SPI
7.6.4. FormatterRegistrar SPI
7.6.5. Configuring Formatting in Spring MVC
7.7. Configuring a global date & time format
7.8. Spring Validation
7.8.1. Overview of the JSR-303 Bean Validation API
7.8.2. Configuring a Bean Validation Provider
Injecting a Validator
Configuring Custom Constraints
Spring-driven Method Validation
Additional Configuration Options
7.8.3. 配置DataBinder
7.8.4. Spring MVC 3校验
Triggering @Controller Input Validation
Configuring a Validator for use by Spring MVC
Configuring a JSR-303/JSR-349 Validator for use by Spring MVC
8. Spring表达式语言(SpEL)
8.1. 介绍
8.2. 功能概述
8.3. 使用Spring的Expression接口进行表达式计算
8.3.1. EvaluationContext接口
类型转换
8.3.2. Parser配置
8.3.3. SpEL编译
Compiler配置
Compiler限制
8.4. Expression support for defining bean definitions
8.4.1. 基于XML的配置
8.4.2. 基于注解的配置
8.5. Language Reference
8.5.1. Literal expressions
8.5.2. Properties, Arrays, Lists, Maps, Indexers
8.5.3. Inline lists
8.5.4. Inline Maps
8.5.5. Array construction
8.5.6. 方法
8.5.7. 运算符
关系运算符
逻辑运算符
数学运算符
8.5.8. 赋值
8.5.9. 类型
8.5.10. 构造器
8.5.11. 变量
#this和#root变量
8.5.12. 函数
8.5.13. Bean引用
8.5.14. Ternary Operator (If-Then-Else)
8.5.15. The Elvis Operator
8.5.16. Safe Navigation operator
8.5.17. Collection Selection
8.5.18. Collection Projection
8.5.19. Expression templating
8.6. Classes used in the examples
9. Spring面向切面编程
9.1. 介绍
9.1.1. AOP相关概念
9.1.2. Spring AOP的功能和目标
9.1.3. AOP代理
9.2. @AspectJ支持
9.2.1. 启用@AspectJ支持
使用Java配置来启用 @AspectJ支持
使用XML配置来启用 @AspectJ支持
9.2.2. 声明一个aspect
9.2.3. 声明一个pointcut
Supported Pointcut Designators
Combining pointcut expressions
Sharing common pointcut definitions
示例
Writing good pointcuts
9.2.4. 声明advice
Before advice
After returning advice
After throwing advice
After (finally) advice
Around advice
Advice parameters
Advice ordering
9.2.5. Introductions
9.2.6. Aspect instantiation models
9.2.7. 示例
9.3. Schema-based AOP support
9.3.1. 声明一个aspect
9.3.2. 声明一个pointcut
9.3.3. 声明advice
Before advice
After returning advice
After throwing advice
After (finally) advice
Around advice
Advice parameters
Advice ordering
9.3.4. 介绍
9.3.5. Aspect instantiation models
9.3.6. Advisors
9.3.7. 示例
9.4. Choosing which AOP declaration style to use
9.4.1. Spring AOP or full AspectJ?
9.4.2. @AspectJ or XML for Spring AOP?
9.5. Mixing aspect types
9.6. 代理机制
9.6.1. 理解AOP代理
9.7. Programmatic creation of @AspectJ Proxies
9.8. Using AspectJ with Spring applications
9.8.1. Using AspectJ to dependency inject domain objects with Spring
Unit testing @Configurable objects
Working with multiple application contexts
9.8.2. Other Spring aspects for AspectJ
9.8.3. Configuring AspectJ aspects using Spring IoC
9.8.4. Load-time weaving with AspectJ in the Spring Framework
A first example
Aspects
META-INF/aop.xml
Required libraries (JARS)
Spring配置
Environment-specific configuration
9.9. 更多资源
10. Spring AOP APIs
10.1. 介绍
10.2. Spring中的Pointcut API
10.2.1. 概念
10.2.2. Operations on pointcuts
10.2.3. AspectJ expression pointcuts
10.2.4. Convenience pointcut implementations
Static pointcuts
Dynamic pointcuts
10.2.5. Pointcut superclasses
10.2.6. Custom pointcuts
10.3. Spring中的Advice API
10.3.1. Advice生命周期
10.3.2. Spring中的Advice类型
Interception around advice
Before advice
Throws advice
After Returning advice
Introduction advice
10.4. Spring中的Advisor API
10.5. 使用ProxyFactoryBean来创建AOP代理
10.5.1. Basics
10.5.2. JavaBean properties
10.5.3. 基于JDK和基于CGLIB的代理
10.5.4. 代理接口
10.5.5. 代理类
10.5.6. 使用全局的advisors
10.6. Concise proxy definitions
10.7. Creating AOP proxies programmatically with the ProxyFactory
10.8. Manipulating advised objects
10.9. Using the "auto-proxy" facility
10.9.1. Autoproxy bean definitions
BeanNameAutoProxyCreator
DefaultAdvisorAutoProxyCreator
AbstractAdvisorAutoProxyCreator
10.9.2. Using metadata-driven auto-proxying
10.10. 使用TargetSources
10.10.1. Hot swappable target sources
10.10.2. Pooling target sources
10.10.3. Prototype target sources
10.10.4. ThreadLocal target sources
10.11. 定义新的Advice类型
10.12. 更多资源
11. 测试
11.1. Spring测试介绍
11.2. 单元测试
11.2.1. 模拟对象
环境
JNDI
Servlet API
Portlet API
11.2.2. Unit Testing support Classes
General utilities
Spring MVC
11.3. 集成测试
11.3.1. 概述
11.3.2. 集成测试目标
上下文管理和缓存
Dependency Injection of test fixtures
事务管理
Support classes for integration testing
11.3.3. JDBC Testing Support
11.3.4. 注解
Spring Testing Annotations
标准注解支持
Spring JUnit Testing注解
Meta-Annotation Support for Testing
11.3.5. Spring TestContext框架
关键的抽象
TestExecutionListener配置
上下文管理
Dependency injection of test fixtures
Testing request and session scoped beans
事务管理
执行SQL脚本
TestContext Framework support classes
11.3.6. Spring MVC Test Framework
Server-Side Tests
Client-Side REST Tests
11.3.7. PetClinic示例
11.4. 更多资源
IV. 数据访问
12. 事务管理
12.1. Spring框架事务管理介绍
12.2. Advantages of the Spring Framework’s transaction support model
12.2.1. 全局事务
12.2.2. 本地事务
12.2.3. Spring框架统一的编程模型
12.3. 理解Spring框架的事务抽象
12.4. 使用事务同步资源
12.4.1. 高层次的同步方法
12.4.2. 低层次的同步方法
12.4.3. TransactionAwareDataSourceProxy
12.5. 声明式事务管理
12.5.1. 理解Spring框架的声明式事务实现
12.5.2. 声明式事务实现示例
12.5.3. 回滚一个声明式事务
12.5.4. Configuring different transactional semantics for different beans
12.5.5. <tx:advice/>设置
12.5.6. 使用@Transactional
@Transactional设置
Multiple Transaction Managers with @Transactional
Custom shortcut annotations
12.5.7. 事务传播
Required
RequiresNew
Nested
12.5.8. Advising transactional operations
12.5.9. Using @Transactional with AspectJ
12.6. 编程式事务管理
12.6.1. 使用TransactionTemplate
Specifying transaction settings
12.6.2. 使用PlatformTransactionManager
12.7. Choosing between programmatic and declarative transaction management
12.8. Application server-specific integration
12.8.1. IBM WebSphere
12.8.2. Oracle WebLogic Server
12.9. Solutions to common problems
12.9.1. Use of the wrong transaction manager for a specific DataSource
12.10. 更多资源
13. DAO支持
13.1. 介绍
13.2. 统一的异常层次结构
13.3. Annotations used for configuring DAO or Repository classes
14. 使用JDBC进行数据访问
14.1. Spring框架JDBC介绍
14.1.1. Choosing an approach for JDBC database access
14.1.2. 包层次结构
14.2. Using the JDBC core classes to control basic JDBC processing and error handling
14.2.1. JdbcTemplate
JdbcTemplate类的使用示例
JdbcTemplate类的最佳实践
14.2.2. NamedParameterJdbcTemplate
14.2.3. SQLExceptionTranslator
14.2.4. 执行语句
14.2.5. 运行查询
14.2.6. 更新数据库
14.2.7. Retrieving auto-generated keys
14.3. 控制数据库连接
14.3.1. DataSource
14.3.2. DataSourceUtils
14.3.3. SmartDataSource
14.3.4. AbstractDataSource
14.3.5. SingleConnectionDataSource
14.3.6. DriverManagerDataSource
14.3.7. TransactionAwareDataSourceProxy
14.3.8. DataSourceTransactionManager
14.3.9. NativeJdbcExtractor
14.4. JDBC批处理操作
14.4.1. Basic batch operations with the JdbcTemplate
14.4.2. Batch operations with a List of objects
14.4.3. Batch operations with multiple batches
14.5. 使用SimpleJdbc类简化JDBC操作
14.5.1. 使用SimpleJdbcInsert插入数据
14.5.2. Retrieving auto-generated keys using SimpleJdbcInsert
14.5.3. 为SimpleJdbcInsertSpecifying指定列
14.5.4. 使用SqlParameterSource提供参数值
14.5.5. 使用SimpleJdbcCall调用存储过程
14.5.6. 为SimpleJdbcCall显示的声明使用参数
14.5.7. 如何定义SqlParameters
14.5.8. 使用SimpleJdbcCall调用存储函数
14.5.9. Returning ResultSet/REF Cursor from a SimpleJdbcCall
14.6. Modeling JDBC operations as Java objects
14.6.1. SqlQuery
14.6.2. MappingSqlQuery
14.6.3. SqlUpdate
14.6.4. StoredProcedure
14.7. Common problems with parameter and data value handling
14.7.1. Providing SQL type information for parameters
14.7.2. 处理BLOB和CLOB对象
14.7.3. Passing in lists of values for IN clause
14.7.4. 为存储过程调用处理复杂类型
14.8. 嵌入式数据库的支持
14.8.1. 为什么使用嵌入式数据库?
14.8.2. 使用Spring XML创建一个嵌入式数据库实例
14.8.3. 用编程的方式创建一个嵌入式数据库实例
14.8.4. Extending the embedded database support
14.8.5. 使用HSQL
14.8.6. 使用H2
14.8.7. 使用Derby
14.8.8. 使用嵌入式数据库测试数据访问逻辑
14.9. 实例化一个DataSource
14.9.1. Initializing a database instance using Spring XML
Initialization of Other Components that Depend on the Database
15. Object Relational Mapping (ORM) Data Access
15.1. Introduction to ORM with Spring
15.2. General ORM integration considerations
15.2.1. Resource and transaction management
15.2.2. Exception translation
15.3. Hibernate
15.3.1. Spring容器中SessionFactory设置
15.3.2. Implementing DAOs based on plain Hibernate 3 API
15.3.3. 声明式事务划分
15.3.4. 编程式事务划分
15.3.5. 事务管理策略
15.3.6. Comparing container-managed and locally defined resources
15.3.7. Spurious application server warnings with Hibernate
15.4. JDO
15.4.1. PersistenceManagerFactory设置
15.4.2. Implementing DAOs based on the plain JDO API
15.4.3. 事务管理
15.4.4. JdoDialect
15.5. JPA
15.5.1. Three options for JPA setup in a Spring environment
LocalEntityManagerFactoryBean
Obtaining an EntityManagerFactory from JNDI
LocalContainerEntityManagerFactoryBean
Dealing with multiple persistence units
15.5.2. Implementing DAOs based on plain JPA
15.5.3. 事务管理
15.5.4. JpaDialect
16. Marshalling XML using O/X Mappers
16.1. 介绍
16.1.1. Ease of configuration
16.1.2. Consistent Interfaces
16.1.3. Consistent Exception Hierarchy
16.2. Marshaller和Unmarshaller
16.2.1. Marshaller
16.2.2. Unmarshaller
16.2.3. XmlMappingException
16.3. 使用Marshaller和Unmarshaller
16.4. 基于Schema的XML配置
16.5. JAXB
16.5.1. Jaxb2Marshaller
基于Schema的XML配置
16.6. Castor
16.6.1. CastorMarshaller
16.6.2. Mapping
基于Schema的XML配置
16.7. XMLBeans
16.7.1. XmlBeansMarshaller
基于Schema的XML配置
16.8. JiBX
16.8.1. JibxMarshaller
基于Schema的XML配置
16.9. XStream
16.9.1. XStreamMarshaller
V. Web
17. Web MVC框架
17.1. Spring Web MVC框架介绍
17.1.1. Spring Web MVC特性
17.1.2. 其它MVC实现的可插入性
17.2. DispatcherServlet
17.2.1. WebApplicationContext中特殊类型的Bean
17.2.2. Default DispatcherServlet Configuration
17.2.3. DispatcherServlet Processing Sequence
17.3. Implementing Controllers
17.3.1. 使用@Controller定义一个控制器
17.3.2. 使用@RequestMapping映射请求
@Controller's and AOP Proxying
New Support Classes for @RequestMapping methods in Spring MVC 3.1
URI Template Patterns
URI Template Patterns with Regular Expressions
Path Patterns
Path Pattern Comparison
Path Patterns with Placeholders
Path Pattern Matching By Suffix
Matrix Variables
Consumable Media Types
Producible Media Types
Request Parameters and Header Values
17.3.3. Defining @RequestMapping handler methods
支持的方法参数类型
支持的方法返回值类型
使用@RequestParam注解绑定请求参数到方法参数上
使用@RequestBody注解映射请求体
使用@ResponseBody注解映射响应体
使用@RestController注解创建REST风格的Controller
使用HttpEntity
在方法上使用@ModelAttribute注解
在方法参数上使用@ModelAttribute注解
Using @SessionAttributes to store model attributes in the HTTP session between requests
Specifying redirect and flash attributes
Working with "application/x-www-form-urlencoded" data
Mapping cookie values with the @CookieValue annotation
Mapping request header attributes with the @RequestHeader annotation
Method Parameters And Type Conversion
Customizing WebDataBinder initialization
Support for the Last-Modified Response Header To Facilitate Content Caching
Advising controllers with the @ControllerAdvice annotation
Jackson Serialization View Support
Jackson JSONP Support
17.3.4. 异步请求处理
Exception Handling for Async Requests
Intercepting Async Requests
Configuration for Async Request Processing
17.3.5. Testing Controllers
17.4. Handler mappings
17.4.1. Intercepting requests with a HandlerInterceptor
17.5. Resolving views
17.5.1. Resolving views with the ViewResolver interface
17.5.2. Chaining ViewResolvers
17.5.3. Redirecting to views
RedirectView
The redirect: prefix
The forward: prefix
17.5.4. ContentNegotiatingViewResolver
17.6. Using flash attributes
17.7. Building URIs
17.7.1. Building URIs to Controllers and methods
17.7.2. Building URIs to Controllers and methods from views
17.8. 使用locales
17.8.1. 获取Time Zone信息
17.8.2. AcceptHeaderLocaleResolver
17.8.3. CookieLocaleResolver
17.8.4. SessionLocaleResolver
17.8.5. LocaleChangeInterceptor
17.9. 使用themes
17.9.1. themes概述
17.9.2. 定义themes
17.9.3. Theme resolvers
17.10. Spring’s multipart (file upload) support
17.10.1. 介绍
17.10.2. Using a MultipartResolver with Commons FileUpload
17.10.3. Using a MultipartResolver with Servlet 3.0
17.10.4. Handling a file upload in a form
17.10.5. Handling a file upload request from programmatic clients
17.11. 异常处理
17.11.1. HandlerExceptionResolver
17.11.2. @ExceptionHandler
17.11.3. Handling Standard Spring MVC Exceptions
17.11.4. Annotating Business Exceptions With @ResponseStatus
17.11.5. Customizing the Default Servlet Container Error Page
17.12. Web安全
17.13. Convention over configuration support
17.13.1. The Controller ControllerClassNameHandlerMapping
17.13.2. The Model ModelMap (ModelAndView)
17.13.3. The View - RequestToViewNameTranslator
17.14. ETag support
17.15. Code-based Servlet container initialization
17.16. 配置Spring MVC
17.16.1. Enabling the MVC Java Config or the MVC XML Namespace
17.16.2. Customizing the Provided Configuration
17.16.3. Interceptors
17.16.4. Content Negotiation
17.16.5. View Controllers
17.16.6. View Resolvers
17.16.7. Serving of Resources
17.16.8. Falling Back On the "Default" Servlet To Serve Resources
17.16.9. Path Matching
17.16.10. Advanced Customizations with MVC Java Config
17.16.11. Advanced Customizations with the MVC Namespace
18. 视图技术
18.1. 介绍
18.2. JSP & JSTL
18.2.1. View resolvers
18.2.2. Plain-old JSPs versus JSTL
18.2.3. Additional tags facilitating development
18.2.4. 使用Spring的表单标签库
配置
form标签
input标签
checkbox标签
checkboxes标签
radiobutton标签
radiobuttons标签
password标签
select标签
option标签
options标签
textarea标签
hidden标签
errors标签
HTTP Method Conversion
HTML5标签
18.3. Tiles
18.3.1. 依赖
18.3.2. 如何集成Tiles
UrlBasedViewResolver
ResourceBundleViewResolver
SimpleSpringPreparerFactory和SpringBeanPreparerFactory
18.4. Velocity和FreeMarker
18.4.1. 依赖
18.4.2. Context configuration
18.4.3. 创建模板
18.4.4. 高级配置
velocity.properties
FreeMarker
18.4.5. Bind support and form handling
The bind macros
Simple binding
Form input generation macros
HTML escaping and XHTML compliance
18.5. XSLT
18.5.1. My First Words
Bean定义
Standard MVC controller code
Convert the model data to XML
Defining the view properties
Document transformation
18.5.2. 总结
18.6. Document views (PDF/Excel)
18.6.1. 介绍
18.6.2. Configuration and setup
Document view definitions
Controller code
Subclassing for Excel views
Subclassing for PDF views
18.7. JasperReports
18.7.1. Dependencies
18.7.2. 配置
配置ViewResolver
Configuring the Views
About Report Files
使用JasperReportsMultiFormatView
18.7.3. Populating the ModelAndView
18.7.4. Working with Sub-Reports
Configuring Sub-Report Files
Configuring Sub-Report Data Sources
18.7.5. Configuring Exporter Parameters
18.8. Feed Views
18.9. XML Marshalling View
18.10. JSON Mapping View
18.11. XML Mapping View
19. 集成其它web框架
19.1. 介绍
19.2. Common configuration
19.3. JavaServer Faces 1.2
19.3.1. SpringBeanFacesELResolver (JSF 1.2+)
19.3.2. FacesContextUtils
19.4. Apache Struts 2.x
19.5. Tapestry 5.x
19.6. 更多资源
20. Portlet MVC框架
20.1. 介绍
20.1.1. Controllers - MVC中的C
20.1.2. Views - MVC中的V
20.1.3. Web-scoped beans
20.2. DispatcherPortlet
20.3. ViewRendererServlet
20.4. Controllers
20.4.1. AbstractController和PortletContentGenerator
20.4.2. Other simple controllers
20.4.3. Command Controllers
20.4.4. PortletWrappingController
20.5. Handler mappings
20.5.1. PortletModeHandlerMapping
20.5.2. ParameterHandlerMapping
20.5.3. PortletModeParameterHandlerMapping
20.5.4. Adding HandlerInterceptors
20.5.5. HandlerInterceptorAdapter
20.5.6. ParameterMappingInterceptor
20.6. Views and resolving them
20.7. Multipart (file upload) support
20.7.1. Using the PortletMultipartResolver
20.7.2. Handling a file upload in a form
20.8. Handling exceptions
20.9. Annotation-based controller configuration
20.9.1. Setting up the dispatcher for annotation support
20.9.2. Defining a controller with @Controller
20.9.3. Mapping requests with @RequestMapping
20.9.4. Supported handler method arguments
20.9.5. Binding request parameters to method parameters with @RequestParam
20.9.6. Providing a link to data from the model with @ModelAttribute
20.9.7. Specifying attributes to store in a Session with @SessionAttributes
20.9.8. Customizing WebDataBinder initialization
Customizing data binding with @InitBinder
Configuring a custom WebBindingInitializer
20.10. Portlet application deployment
21. WebSocket支持
21.1. 介绍
21.1.1. WebSocket Fallback Options
21.1.2. A Messaging Architecture
21.1.3. Sub-Protocol Support in WebSocket
21.1.4. 我应该使用WebSocket吗?
21.2. WebSocket API
21.2.1. 创建和配置一个WebSocketHandler
21.2.2. Customizing the WebSocket Handshake
21.2.3. WebSocketHandler Decoration
21.2.4. Deployment Considerations
21.2.5. 配置WebSocket引擎
21.3. SockJS Fallback Options
21.3.1. SockJS概述
21.3.2. 启用SockJS
21.3.3. HTTP Streaming in IE 8, 9: Ajax/XHR vs IFrame
21.3.4. 心跳消息
21.3.5. Servlet 3 Async Requests
21.3.6. CORS Headers for SockJS
21.3.7. SockJS客户端
21.4. STOMP Over WebSocket Messaging Architecture
21.4.1. STOMP概述
21.4.2. Enable STOMP over WebSocket
21.4.3. Flow of Messages
21.4.4. Annotation Message Handling
21.4.5. Sending Messages
21.4.6. Simple Broker
21.4.7. Full-Featured Broker
21.4.8. Connections To Full-Featured Broker
21.4.9. Using Dot as Separator in @MessageMapping Destinations
21.4.10. Authentication
21.4.11. User Destinations
21.4.12. Listening To ApplicationContext Events and Intercepting Messages
21.4.13. WebSocket Scope
21.4.14. Configuration and Performance
21.4.15. Runtime Monitoring
21.4.16. Testing Annotated Controller Methods
VI. 集成
22. Remoting and web services using Spring
22.1. 介绍
22.2. Exposing services using RMI
22.2.1. Exporting the service using the RmiServiceExporter
22.2.2. Linking in the service at the client
22.3. Using Hessian or Burlap to remotely call services via HTTP
22.3.1. Wiring up the DispatcherServlet for Hessian and co.
22.3.2. Exposing your beans by using the HessianServiceExporter
22.3.3. Linking in the service on the client
22.3.4. 使用Burlap
22.3.5. Applying HTTP basic authentication to a service exposed through Hessian or Burlap
22.4. Exposing services using HTTP invokers
22.4.1. Exposing the service object
22.4.2. Linking in the service at the client
22.5. Web服务
22.5.1. Exposing servlet-based web services using JAX-WS
22.5.2. Exporting standalone web services using JAX-WS
22.5.3. Exporting web services using the JAX-WS RI’s Spring support
22.5.4. 使用JAX-WS访问web服务
22.6. JMS
22.6.1. 服务器端的配置
22.6.2. 客户端的配置
22.7. AMQP
22.8. Auto-detection is not implemented for remote interfaces
22.9. Considerations when choosing a technology
22.10. 在客户端访问RESTful服务
22.10.1. RestTemplate
Working with the URI
处理请求和响应头部
Jackson JSON Views support
22.10.2. HTTP Message Conversion
StringHttpMessageConverter
FormHttpMessageConverter
ByteArrayHttpMessageConverter
MarshallingHttpMessageConverter
MappingJackson2HttpMessageConverter
MappingJackson2XmlHttpMessageConverter
SourceHttpMessageConverter
BufferedImageHttpMessageConverter
22.10.3. Async RestTemplate
23. 集成Enterprise JavaBeans (EJB)
23.1. 介绍
23.2. 访问EJBs
23.2.1. 概念
23.2.2. 访问本地SLSBs
23.2.3. 访问远程SLSBs
23.2.4. Accessing EJB 2.x SLSBs versus EJB 3 SLSBs
23.3. Using Spring’s EJB implementation support classes
23.3.1. EJB 3 injection interceptor
24. JMS (Java Message Service)
24.1. 介绍
24.2. 使用Spring JMS
24.2.1. JmsTemplate
24.2.2. Connections
Caching Messaging Resources
SingleConnectionFactory
CachingConnectionFactory
24.2.3. Destination Management
24.2.4. Message Listener Containers
SimpleMessageListenerContainer
DefaultMessageListenerContainer
24.2.5. 事务管理
24.3. 发送消息
24.3.1. 使用消息转换器
24.3.2. SessionCallback和ProducerCallback
24.4. 接收消息
24.4.1. 同步接收
24.4.2. 异步接收 - Message-Driven POJOs
24.4.3. SessionAwareMessageListener接口
24.4.4. MessageListenerAdapter
24.4.5. 在事务中处理消息
24.5. Support for JCA Message Endpoints
24.6. Annotation-driven listener endpoints
24.6.1. Enable listener endpoint annotations
24.6.2. Programmatic endpoints registration
24.6.3. Annotated endpoint method signature
24.6.4. Reply management
24.7. JMS Namespace Support
25. JMX
25.1. 介绍
25.2. Exporting your beans to JMX
25.2.1. 创建一个MBeanServer
25.2.2. 复用一个已存在的MBeanServer
25.2.3. 延迟加载MBeans
25.2.4. 自动注册MBeans
25.2.5. 控制注册行为
25.3. Controlling the management interface of your beans
25.3.1. MBeanInfoAssembler接口
25.3.2. 使用源码级别的元数据(Java注解)
25.3.3. 源码级别的元数据类型
25.3.4. AutodetectCapableMBeanInfoAssembler接口
25.3.5. Defining management interfaces using Java interfaces
25.3.6. 使用MethodNameBasedMBeanInfoAssembler
25.4. Controlling the ObjectNames for your beans
25.4.1. Reading ObjectNames from Properties
25.4.2. 使用MetadataNamingStrategy
25.4.3. Configuring annotation based MBean export
25.5. JSR-160连接器
25.5.1. 服务器端的连接器
25.5.2. 客户端的连接器
25.5.3. JMX over Burlap/Hessian/SOAP
25.6. Accessing MBeans via Proxies
25.7. 通知
25.7.1. 为通知注册监听器
25.7.2. 发布通知
25.8. 更多资源
26. JCA CCI
26.1. 介绍
26.2. 配置CCI
26.2.1. Connector配置
26.2.2. Spring中ConnectionFactory的配置
26.2.3. 配置CCI连接
26.2.4. Using a single CCI connection
26.3. Using Spring’s CCI access support
26.3.1. Record conversion
26.3.2. CciTemplate
26.3.3. DAO support
26.3.4. Automatic output record generation
26.3.5. 总结
26.3.6. Using a CCI Connection and Interaction directly
26.3.7. CciTemplate使用示例
26.4. Modeling CCI access as operation objects
26.4.1. MappingRecordOperation
26.4.2. MappingCommAreaOperation
26.4.3. Automatic output record generation
26.4.4. 总结
26.4.5. MappingRecordOperation使用示例
26.4.6. MappingCommAreaOperation使用示例
26.5. 事务
27. Email
27.1. 介绍
27.2. 使用
27.2.1. Basic MailSender and SimpleMailMessage usage
27.2.2. 使用JavaMailSender和MimeMessagePreparator
27.3. 使用JavaMail MimeMessageHelper
27.3.1. Sending attachments and inline resources
附件
Inline resources
27.3.2. 使用模板库创建邮件内容
一个基于Velocity的示例
28. 任务执行和调度
28.1. 介绍
28.2. Spring TaskExecutor抽象
28.2.1. TaskExecutor类型
28.2.2. 使用TaskExecutor
28.3. Spring TaskScheduler抽象
28.3.1. Trigger接口
28.3.2. Trigger实现
28.3.3. TaskScheduler实现
28.4. Annotation Support for Scheduling and Asynchronous Execution
28.4.1. Enable scheduling annotations
28.4.2. @Scheduled注解
28.4.3. @Async注解
28.4.4. Executor qualification with @Async
28.4.5. Exception management with @Async
28.5. Task Namespace
28.5.1. scheduler元素
28.5.2. executor元素
28.5.3. scheduled-tasks元素
28.6. 使用Quartz Scheduler
28.6.1. 使用JobDetailFactoryBean
28.6.2. 使用MethodInvokingJobDetailFactoryBean
28.6.3. Wiring up jobs using triggers and the SchedulerFactoryBean
29. 动态语言支持
29.1. 介绍
29.2. A first example
29.3. Defining beans that are backed by dynamic languages
29.3.1. Common concepts
<lang:language/>元素
Refreshable beans
Inline dynamic language source files
Understanding Constructor Injection in the context of dynamic-language-backed beans
29.3.2. JRuby beans
29.3.3. Groovy beans
Customizing Groovy objects via a callback
29.3.4. BeanShell beans
29.4. Scenarios
29.4.1. Scripted Spring MVC Controllers
29.4.2. Scripted Validators
29.5. Bits and bobs
29.5.1. AOP - advising scripted beans
29.5.2. Scoping
29.6. 更多资源
30. 缓存抽象
30.1. 介绍
30.2. 理解缓存抽象
30.3. Declarative annotation-based caching
30.3.1. @Cacheable注解
Default Key Generation
Custom Key Generation Declaration
Default Cache Resolution
Custom cache resolution
Conditional caching
Available caching SpEL evaluation context
30.3.2. @CachePut注解
30.3.3. @CacheEvict注解
30.3.4. @Caching注解
30.3.5. @CacheConfig注解
30.3.6. 启用缓存注解
30.3.7. 使用自定义注解
30.4. JCache (JSR-107)注解
30.4.1. Features summary
30.4.2. Enabling JSR-107 support
30.5. Declarative XML-based caching
30.6. Configuring the cache storage
30.6.1. JDK ConcurrentMap-based Cache
30.6.2. EhCache-based Cache
30.6.3. Guava Cache
30.6.4. GemFire-based Cache
30.6.5. JSR-107 Cache
30.6.6. Dealing with caches without a backing store
30.7. Plugging-in different back-end caches
30.8. How can I set the TTL/TTI/Eviction policy/XXX feature?
VII. 附录
31. 迁移到Spring框架4.0版本
32. Spring的典型应用
32.1. Classic ORM usage
32.1.1. Hibernate
HibernateTemplate
Implementing Spring-based DAOs without callbacks
32.1.2. JDO
JdoTemplate和JdoDaoSupport
32.1.3. JPA
JpaTemplate和JpaDaoSupport
32.2. Spring MVC的典型应用
32.3. JMS使用
32.3.1. JmsTemplate
32.3.2. Asynchronous Message Reception
32.3.3. Connections
32.3.4. 事务管理
33. Spring AOP的典型应用
33.1. Pointcut API in Spring
33.1.1. 概念
33.1.2. Operations on pointcuts
33.1.3. AspectJ expression pointcuts
33.1.4. Convenience pointcut implementations
Static pointcuts
Dynamic pointcuts
33.1.5. Pointcut superclasses
33.1.6. Custom pointcuts
33.2. Advice API in Spring
33.2.1. Advice lifecycles
33.2.2. Advice types in Spring
Interception around advice
Before advice
Throws advice
After Returning advice
Introduction advice
33.3. Advisor API in Spring
33.4. Using the ProxyFactoryBean to create AOP proxies
33.4.1. Basics
33.4.2. JavaBean properties
33.4.3. JDK- and CGLIB-based proxies
33.4.4. Proxying interfaces
33.4.5. Proxying classes
33.4.6. Using global advisors
33.5. Concise proxy definitions
33.6. Creating AOP proxies programmatically with the ProxyFactory
33.7. Manipulating advised objects
33.8. Using the "autoproxy" facility
33.8.1. Autoproxy bean definitions
BeanNameAutoProxyCreator
DefaultAdvisorAutoProxyCreator
AbstractAdvisorAutoProxyCreator
33.8.2. Using metadata-driven auto-proxying
33.9. Using TargetSources
33.9.1. Hot swappable target sources
33.9.2. Pooling target sources
33.9.3. Prototype target sources
33.9.4. ThreadLocal target sources
33.10. Defining new Advice types
33.11. 更多资源
34. 基于Schema的XML配置
34.1. 介绍
34.2. 基于Schema的XML配置
34.2.1. 引用schema
34.2.2. util schema
<util:constant/>
<util:property-path/>
<util:properties/>
<util:list/>
<util:map/>
<util:set/>
34.2.3. jee schema
<jee:jndi-lookup/> (simple)
<jee:jndi-lookup/> (with single JNDI environment setting)
<jee:jndi-lookup/> (with multiple JNDI environment settings)
<jee:jndi-lookup/> (complex)
<jee:local-slsb/> (simple)
<jee:local-slsb/> (complex)
<jee:remote-slsb/>
34.2.4. lang schema
34.2.5. jms schema
34.2.6. tx (transaction) schema
34.2.7. aop schema
34.2.8. context schema
<property-placeholder/>
<annotation-config/>
<component-scan/>
<load-time-weaver/>
<spring-configured/>
<mbean-export/>
34.2.9. tool schema
34.2.10. jdbc schema
34.2.11. cache schema
34.2.12. beans schema
35. 编写可扩展的XML
35.1. 介绍
35.2. 编写schema
35.3. 编写一个NamespaceHandler
35.4. BeanDefinitionParser
35.5. 注册处理器和schema
35.5.1. META-INF/spring.handlers
35.5.2. META-INF/spring.schemas
35.6. 在Spring XML配置文件中使用自定义的扩展 
35.7. 丰富的示例
35.7.1. 自定义标签中嵌套自定义标签
35.7.2. 在普通元素上自定义属性
35.8. 更多资源
36. spring.tld
36.1. 介绍
36.2. bind标签
36.3. escapeBody标签
36.4. hasBindErrors标签
36.5. htmlEscape标签
36.6. message标签
36.7. nestedPath标签
36.8. theme标签
36.9. transform标签
36.10. url标签
36.11. eval标签
37. spring-form.tld
37.1. 介绍
37.2. checkbox标签
37.3. checkboxes标签
37.4. errors标签
37.5. form标签
37.6. hidden标签
37.7. input标签
37.8. label标签
37.9. option标签
37.10. options标签
37.11. password标签
37.12. radiobutton标签
37.13. radiobuttons标签
37.14. select标签
37.15. textarea标签
